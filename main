import java.io.FileNotFoundException;
import java.util.Scanner;
import javax.swing.JFileChooser;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;

public class Prog07_AnalyzeGrades {

	static int z;
	
	public static void main (String[] args) throws FileNotFoundException {
		Scanner userIn = new Scanner(System.in);

		Scanner fileScanner = fileInput();
		int Grades[] = arrayAssigner(fileScanner);
		
		System.out.println("Enter a sorting value (asc. or desc.):");
		String sort = dirVerifier();
			
		int GradesSorted[] = bubbleSort(Grades,	z, sort);
		
		System.out.println(GradesSorted[0]);
		System.out.println(GradesSorted[1]);
		System.out.println(GradesSorted[2]);
		System.out.println(GradesSorted[3]);
		System.out.println(GradesSorted[4]);
	}
	
public static Scanner fileInput() throws FileNotFoundException {
		try {
			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
			}
		catch (Exception e) {
			}

		JFileChooser file = new JFileChooser();
		FileNameExtensionFilter filter = new FileNameExtensionFilter(
		        "txt", "txt");
		file.setFileFilter(filter);
		
		boolean exit = false;
		do {
		int returnVal = file.showOpenDialog(file);

		 if(returnVal == JFileChooser.APPROVE_OPTION) {
		       System.out.println("Opening " +
		            file.getSelectedFile().getName() + "...");
		       			exit = true;
		       }
		}
		while (exit == false);
		
		return new Scanner (file.getSelectedFile());
		}

public static int[] arrayAssigner(Scanner fileScanner) {
		int x = fileScanner.nextInt();
		z = x;
		int[] Grades = new int [x];
		
		for (int y = 0; y < x; y++) {
			if (fileScanner.hasNextInt()) {
			Grades[y] = fileScanner.nextInt();
			}
		}
		return Grades;	
	}

public static int[] bubbleSort(int Grades[], int z, String sort) {
	int temp;
	
	if (sort.equalsIgnoreCase("asc")) {
		for (int y = 0; y < z; y++) {
			
			for (int x = 0; x < z-1; x++) {
				if (Grades[x] > Grades[x+1]) {
					temp = Grades[x];
					Grades[x] = Grades[x+1];
					Grades[x+1] = temp;
				}
			}
		}
	}
	
	if (sort.equalsIgnoreCase("desc")) {
		for (int y = 0; y < z; y++) {
			
			for (int x = 0; x < z-1; x++) {
				if (Grades[x] < Grades[x+1]) {
				
				}
			}
		}
	}
	
	return Grades;
}

public static int[] swapMethod(int Grades[], int x) {
	int temp;
	
	temp = Grades[x];
	Grades[x] = Grades[x+1];
	Grades[x+1] = temp;
	
	return Grades;
}

public static String dirVerifier() {
	boolean exit = false;
	String sort = null;
	Scanner userIn = new Scanner(System.in);
	while(exit == false) {
		sort = userIn.next();
		if (sort.equalsIgnoreCase("asc") || sort.equalsIgnoreCase("asc.")) {
			sort = "asc";
			exit = true;
		}
		else if (sort.equalsIgnoreCase("desc") || sort.equalsIgnoreCase("desc.")) {
			sort = "desc";
			exit = true;
		}
		else {
			System.out.println("Please enter a valid sorting value (asc. or desc.):");
		}
		}
	return sort;
}


}
